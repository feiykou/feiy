<?php
/**
 * 本节重点：
 * 1、面向对象
 * 2、访问权限
 * 3、关键词
 * 4、魔术常量变量
 * 5、单例模式
 */

/*
 * 一、面向对象  -- lesson8
 * 1、概念
 *  (1) 类：类是一类有共同属性或者方法的事物的集合
 *  (2) 对象：对象是类的实例化
 * 2、语法
 *  (1)类的定义：
 *  class 类名{
 *      权限修饰关键词 $变量名 = 值; //可选
 *      function __construct(){ //构造器 new自动调用
 *          
 *      }
 *      function 方法名($参数名){//可选
 *          $this->$参数名;
 *      }
 *  }
 *  (2)对象的实例化：
 *  $对象名 = new 类名();
 *  (3)对象调用属性和方法
 *     $对象名->属性名;
 *     $对象名->方法名();
 * 
 * 3、构造方法和析构函数（垃圾回收函数）
 * (1) __construct 名称不可以自定义， 实例化对象就会执行的方法,不需要调用,放在类中的任意位置都不影响;
 * (2) __destrcut  名称不可以自定义，垃圾回收函数（析构函数），当脚本走完之后，会自动调用
 *  1> 脚本执行完，自动执行
 *  2> 通过unset(对象)手动清除 从而来触发__destrcut（储存对象的变量被销毁的时候自动执行，监听销毁）
 *     注：如果脚本执行几个小时，中间产生的垃圾不想占用内存，可以手工清理
 *  小知识点：unset(对象);//释放对象
 *  
 *  
 * 4、对象的三大特性：封装，继承，多态
 *  封装：成员方法都被封装起来
 *      封装的目的就是保证内部代码的功能性
 *  继承：使用extends关键词继承基类，那么子类就拥有基类的相关属性和方法
 *  多态：子类可以拥有自己的特性（属性或者方法），这就实现了多态
 * 
 * 5、面向对象的编程方式
 *  编程过程：对象是否存在，存在=>调用，没有=>创建对象=>调用
 *  编程优点：简洁，重用性强，代码安全
 *  面向对象的编程原则：1、开放最小的权限，进行最大化的封装
 *                 2、可以扩展，但不建议修改
 * 
 * 6、面向对象和面向过程
 *  面向过程（也是一种编程思想）：强调功能的本身，实现某种功能
 *  面向对象：一种编程思想，强调的是找到对象，调用对象的方法和属性
 * 
 */

/*
 * 二、访问权限（private，protected，public）  -- lesson9
 * 1、重点：PHP中有三种访问修饰符 默认是public
 * 2、三种修饰符的权限
 *              在类内部                               在外部                             在子类   
 * public        可以                                      可以                                  可以
 * protected     可以                                      不能                                  可以
 * private       可以                                      不能                                  不能
 * 
 * 公共的public：都可以使用
 * 受保护的protected：在类内部和子类可以使用，外部不可以使用
 * 私有的private：只有在内部才能使用
 * 
 * 3、private和protected外部访问
 * 使用__get()和__set()在外部进行获取值和设置
 * 
 * 4、小知识点：
 * (1) 如果字符串中有变量，需要使用{}包裹，字符串需要用双引号
 * (2) 不能用实例化的子类去调用父类protected的变量，可以在子类调用
 */


/*
 * 三、关键词    -- lesson10
 * 1、final 不可更改的  修饰符
 *  特点：
 *      (1) 通过final定义的方法  不可以被重写 
 *      (2) 通过final定义的类      不可以被继承
 *      (3) 本身及其它类调用均不受影响
 * 
 * 2、static 静态变量
 *  特点：
 *      (1) 静态变量关键字，调用self::$静态变量名
 *      (2) 静态属性存在静态代码段
 *      (3) 静态属性或方法可以使用类进行调用，它属于类
 *      (4) 脚本执行完之后，静态变量会自动销毁，无法手动销毁静态变量
 *  注：静态的东西和对象无关，只和类有关
 * 
 * 3、const 定义类常量
 *  特点：
 *      1) 值必须是常量
 *      2) 值一旦定义 不可以更改
 *      3) 常量名不需要开头的美元符号 ($)
 *      4) 通过const定义类常量必须有默认值
 *  使用方式：
 *      1) 在类中使用类常量格式，self::常量名称 | 类名::常量名称
 *      2) 在类外部访问：类名::常量名称
 * 
 * 3、define(name,value,case_insensitive)  定义常量
 *  特点：
 *      1) 在设定以后，常量的值无法更改
 *      2) 常量名不需要开头的美元符号 ($)
 *      3) 作用域不影响对常量的访问
 *      4) 常量值只能是字符串或数字
 *  注意：在类中不能定义
 *  知识点：defined("常量名") 判断是否存在某个常量
 *  
 *  区别：
 *      (1) static和const的区别：
 *        1> const是不能被修改的，static是可以被修改的
 *        2> 常量const是不需要$，因为是常量
 *        
 *      (2) const和define的区别：
 *        区别：1> const是类常量，define是常量
 *        相同：1> 常量的值只能是字符串和数字;  2> 值不能更改; 
 * 
 *      
 * ========================== abstract和interface ==============================
 * 1、abstract  抽象的
 *  特点：
 *      (1) 通过abstract定义的方法在发生继承的情况下必须重写 
 *      (2) 通过abstract定义的方法不可以有代码体
 *      (3) 有abstract的方法 则类必须是abstract类
 *      (4) 抽象类中可以有普通方法
 *      
 * 2、interface  接口
 *  定义接口  用 interface
 *  继承接口   implements
 *  特点：
 *      (1) 接口类中的所有方法必须被重写
 *      (2) 接口类中所有方法都是抽象方法
 *      (3) 接口类中的方法不需要加abstract
 *    
 * abstract 和  interface 的区别：
 *  (1) abstract类中可以有普通方法   interface不可以
 *  
 * 注意：1、重写必须是在继承的前提之下的； 2、重写方法可以不需要任何代码体
 * ===========================================================
 * 
 * 
 * ========================== $this，self和parent ==============================
 * 1、$this    指向实例化产生的对象，引用非静态类
 * 2、self     指向类  self可以访问本类中的静态属性和静态方法,常量，可以访问父类中的静态属性和静态方法
 * 3、parent   可用于调用父类中定义的成员方法（公共的）和静态量
 * 
 * 经验：变量使用$this引用，常量使用self引用
 * 
 *  
 */


/*
 * 四、魔术变量 ---lesson11
 * 魔术常量
 * 		__FILE__  获取当前文件绝对路径
 *   	__DIR__   获取当前文件所在的文件夹名  5.3版本以后支持
 *   	__LINE__; 返回行号
 *      __FUNCTION__ 返回方法名
 *      __METHOD__ 返回类名::方法名
 *      __CLASS__ 返回类名
 *
 * 魔术方法：
 * 		在某个时刻自动触发
 * 		function __construct(){} new对象触发
 * 		function __destruct(){}  脚本执行完触发
 *   	function __get(){} //外部调用私有方法或属性，自动触发
 *      function __set(){}
 *      
 * 
 * 小知识点：
 * 1、dirname() 获取当前文件所在的文件夹名
 * 2、include 路径; 引用文件     
 * 3、PHP_VERSION 获取php版本号
 * 4、get_object_vars(对象)
 * 5、get_class_vars(__CLASS__) //获取的是class中属性组成的数组
 * 6、is_null
 * 7、in_array
 */



/*
 * 五、单例模式
 * 概念：无论new多少次，他们都是相等的，减少内存开销，这就是单例模式
 * 构造一个单例：
 * 1、封死构造方法  private
 * 2、添加getConn方法，设置static public修饰
 * 3、在getConn方法中设置条件判断
 * 4、调用：类名::getConn();
 * 5、父类的构造函数设置私有并且设置final，不可重写
 * 6、intval()强制类型转换 小数会舍去小数
 */
class car{
    public $wright = 100;
    static $conn = null;
    public function run(){
        return '汽车可以在公路上跑！';
    }
    
    final private function __construct(){
        
    }
    
    static public function getConn(){
        if(is_null(self::$conn)){
            self::$conn = new self();
        }
        return self::$conn;
    }
    
}

class bentian extends car{
    
}

//无论new多少次，他们都是相等的，减少内存开销，这就是单例模式
$car = car::getConn();
// $runcar = car::getConn();
$runcar = new bentian();
// $runcar = new car();
echo intval($car===$runcar);
// echo intval(1.6); //1 强制转换，小数会舍去小数


 
 
 
 
 
 
 
 
 
 
 